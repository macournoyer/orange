grammar Orange
  rule script
    expression more_expressions:(newline expression)* <Script> {
      def expressions
        [expression] + more_expressions.elements.map { |e| e.expression }
      end
    }
  end
  
  rule expression
    spaced_statements:(space statement)+ space <Expression> {
      def statements
        spaced_statements.elements.map { |e| e.statement }
      end
    }
    /
    space
  end
  
  rule statement
    assign / call / object / comment
  end
  
  rule object
    symbol / number / string / var
  end
  
  rule call
    receiver:object space message space arglist:call_args <Call>
    /
    message:var space arglist:call_args <Call> {
      def receiver; nil end
    }
  end
  
  rule message
    "==" / "!=" / "<" / "<=" / ">" / ">=" /
    "||" / "&&" /
    "+" / "-" / "*" /
    "." var space "=" {
      def value
        var.value + "="
      end
    } /
    "." var {
      def value
        var.value
      end
    }
  end
  
  rule call_args
    opt_args:("(" arglist ")" / arglist) space block:block? {
      def args
        if opt_args.respond_to?(:args)
          opt_args.args
        else
          opt_args.arglist.args
        end
      end
    }
  end
  
  rule arglist
    receiver:statement more_args:(space "," space receiver:statement)* {
      def args
        [receiver] + more_args.elements.map { |e| e.receiver }
      end
    } /
    space {
      def args
        []
      end
    }
  end
  
  rule block
    "do" block_args:(space "|" arglist "|" space)? newline more_expressions:(expression newline)* "end" <Block> {
      def expressions
        more_expressions.elements.map { |e| e.expression }
      end
      def arglist
        block_args.arglist unless block_args.terminal?
      end
    }
  end
  
  rule assign
    var space !"==" "=" expression <Assign>
  end
  
  rule var
    !keyword [a-z] [\w]*
  end
  
  rule keyword
    "do" / "end"
  end
  
  rule symbol
    ":" var
  end
  
  rule number
    [0-9]+ {
      def value
        text_value.to_i
      end
    }
  end
  
  rule string
    '"' (!'"' . / '\"')* '"' {
      def value
        text_value.gsub('"', '')
      end
    }
  end
  
  rule comment
    '#' ( !newline . )+ ( newline / !. )
  end
  
  rule space
    [ \t]*
  end
  
  rule newline
    space ("\r\n"+ / [\r\n]+ / ";") space
  end
end